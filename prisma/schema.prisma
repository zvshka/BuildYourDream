// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  emailVerified  DateTime?
  username       String    @unique
  avatarURL      String?
  hashedPassword String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role         Role      @default(USER)
  messages     Message[]
  configs      Config[]
  likedConfigs Config[]  @relation(name: "liked")

  reports   Report[] @relation(name: "suspiciousUser")
  myReports Report[] @relation(name: "myReports")

  updateRequests    UpdateRequest[]
  proceedRequests   UpdateRequest[] @relation(name: "requestInspector")
  proceedComponents Component[]     @relation(name: "componentInspector")
}

model Report {
  id String @id @default(cuid())

  author      User    @relation(fields: [authorId], references: [id], name: "myReports")
  reason      String
  description String
  approved    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  config  Config?  @relation(fields: [configId], references: [id])
  user    User?    @relation(fields: [userId], references: [id], name: "suspiciousUser")
  message Message? @relation(fields: [messageId], references: [id])

  configId  String?
  userId    String?
  authorId  String
  messageId String?
}

model Message {
  id       String  @id @default(cuid())
  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?
  username String
  body     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reports Report[]
}

model UpdateRequest {
  id String @id @default(cuid())

  author User  @relation(fields: [userId], references: [id])
  admin  User? @relation(fields: [adminId], references: [id], name: "requestInspector")

  approved Boolean @default(false)
  rejected Boolean @default(false)

  rejectReason String?

  data Json

  componentToUpdate Component? @relation(fields: [componentId], references: [id])
  templateToUpdate  Template?  @relation(fields: [templateId], references: [id])

  componentId String?
  templateId  String?

  userId  String
  adminId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Component {
  id   String @id @default(cuid())
  data Json

  template   Template @relation(fields: [templateId], references: [id])
  templateId String

  admin   User?   @relation(fields: [adminId], references: [id], name: "componentInspector")
  adminId String?

  approved Boolean @default(false)
  rejected Boolean @default(false)

  rejectReason String?

  createdAt DateTime @default(now())

  configs        Config[]
  updateRequests UpdateRequest[]
}

model Config {
  id          String @id @default(cuid())
  title       String
  description String

  author User @relation(fields: [userId], references: [id])

  components Component[]
  userId     String

  createdAt DateTime @default(now())

  reports    Report[]
  likedUsers User[]   @relation(name: "liked")
}

enum FieldType {
  BOOL
  TEXT
  NUMBER
  LARGE_TEXT
  RANGE
}

model Template {
  id       String  @id @default(cuid())
  name     String  @unique
  required Boolean @default(false)
  maxCount Int     @default(1)
  position Int     @default(autoincrement())

  showInConfigurator Boolean @default(false)

  components     Component[]
  updateRequests UpdateRequest[]

  fields Json
}

model Constraint {
  id   String @id @default(cuid())
  data Json
}

model Image {
  filename String @unique
  filepath String
  mimetype String
  size     Int
}
