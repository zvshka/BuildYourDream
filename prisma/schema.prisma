// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  emailVerified  DateTime?
  username       String    @unique
  avatarUrl      String?
  bio            String?
  hashedPassword String

  isBanned Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role         Role      @default(USER)
  comments     Comment[]
  configs      Config[]
  likedConfigs Config[]  @relation(name: "liked")

  reports      Report[]    @relation(name: "suspiciousUser")
  myReports    Report[]    @relation(name: "myReports")
  myComponents Component[] @relation(name: "myComponents")

  updateRequests    UpdateRequest[]
  proceedRequests   UpdateRequest[] @relation(name: "requestInspector")
  proceedComponents Component[]     @relation(name: "componentInspector")
  deletedComments   Comment[]       @relation(name: "deletedBy")
}

model Report {
  id String @id @default(cuid())

  author   User   @relation(fields: [authorId], references: [id], name: "myReports")
  authorId String

  reason String

  approved   Boolean   @default(false)
  approvedAt DateTime?

  rejected   Boolean   @default(false)
  rejectedAt DateTime?

  expiredAt DateTime?
  warns     Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  config  Config?  @relation(fields: [configId], references: [id], onDelete: Cascade)
  user    User?    @relation(fields: [userId], references: [id], name: "suspiciousUser")
  comment Comment? @relation(fields: [commentId], references: [id])

  configId  String?
  userId    String?
  commentId String?
}

model Comment {
  id       String @id @default(cuid())
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  body String

  isDeleted Boolean @default(false)
  isEdited  Boolean @default(false)

  deletedBy   User?   @relation(name: "deletedBy", fields: [deletedById], references: [id])
  deletedById String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  component   Component? @relation(fields: [componentId], references: [id])
  componentId String?

  config   Config? @relation(fields: [configId], references: [id])
  configId String?

  replyComment   Comment? @relation(fields: [replyCommentId], references: [id], name: "reply")
  replyCommentId String?

  threadComment   Comment? @relation(name: "thread", fields: [threadCommentId], references: [id])
  threadCommentId String?

  thread  Comment[] @relation(name: "thread")
  answers Comment[] @relation(name: "reply")
  reports Report[]
}

model UpdateRequest {
  id String @id @default(cuid())

  author User  @relation(fields: [userId], references: [id])
  admin  User? @relation(fields: [adminId], references: [id], name: "requestInspector")

  approved Boolean @default(false)
  rejected Boolean @default(false)

  rejectReason String?

  data Json

  componentToUpdate Component? @relation(fields: [componentId], references: [id])
  templateToUpdate  Template?  @relation(fields: [templateId], references: [id])

  componentId String?
  templateId  String?

  userId  String
  adminId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Component {
  id   String @id @default(cuid())
  data Json

  template   Template @relation(fields: [templateId], references: [id])
  templateId String

  admin   User?   @relation(fields: [adminId], references: [id], name: "componentInspector")
  adminId String?

  creator   User?   @relation(fields: [creatorId], references: [id], name: "myComponents")
  creatorId String?

  approved Boolean @default(false)
  rejected Boolean @default(false)

  rejectReason String?

  createdAt DateTime @default(now())

  configs        ComponentInConfig[]
  updateRequests UpdateRequest[]
  comments       Comment[]
}

model ComponentInConfig {
  component Component @relation(fields: [componentId], references: [id])
  config    Config    @relation(fields: [configId], references: [id], onDelete: Cascade)

  componentId String
  configId    String

  count Int @default(1)

  @@id([configId, componentId])
}

model Config {
  id          String @id @default(cuid())
  title       String
  description String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now())

  reports    Report[]
  components ComponentInConfig[]
  likedUsers User[]              @relation(name: "liked")
  comments   Comment[]
}

model Template {
  id       String  @id @default(cuid())
  name     String  @unique
  required Boolean @default(false)
  position Int     @default(autoincrement())

  showInConfigurator Boolean @default(false)

  components     Component[]
  updateRequests UpdateRequest[]

  maxCount Json? @default("{\"type\": \"number\", \"count\": 1}")
  fields   Json
}

model Constraint {
  id   String @id @default(cuid())
  data Json
}

model Image {
  filename String @unique
  filepath String
  mimetype String
  size     Int
}
